import java.util.*;

public class ShamirSecret {
    static String[][] testcase1 = {
            {"1", "10", "4"},
            {"2", "2", "111"},
            {"3", "10", "12"},
            {"6", "4", "213"}
    };

    static String[][] testcase2 = {
            {"1", "6", "13444211440455345511"},
            {"2", "15", "aed7015a346d63"},
            {"3", "15", "6aeeb69631c227c"},
            {"4", "16", "e1b5e05623d881f"},
            {"5", "8", "316034514573652620673"},
            {"6", "3", "2122212201122002221120200210011020220200"},
            {"7", "3", "20120221122211000100210021102001201112121"},
            {"8", "6", "20220554335330240002224253"},
            {"9", "12", "45153788322a1255483"},
            {"10", "7", "1101613130313526312514143"}
    };
    static int k1 = 3;
    static int k2 = 7;
    public static BigInteger decodeValue(String value, int base) {
        return new BigInteger(value, base);
    }
    public static BigInteger lagrangeInterpolationAtZero(List<Integer> xList, List<BigInteger> yList) {
        int k = xList.size();
        BigInteger result = BigInteger.ZERO;

        for (int j = 0; j < k; j++) {
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;
            int xj = xList.get(j);

            for (int m = 0; m < k; m++) {
                if (m != j) {
                    int xm = xList.get(m);
                    numerator = numerator.multiply(BigInteger.valueOf(-xm));
                    denominator = denominator.multiply(BigInteger.valueOf(xj - xm));
                }
            }

            BigInteger term = yList.get(j).multiply(numerator).divide(denominator);
            result = result.add(term);
        }

        return result;
    }
    public static BigInteger processTestcase(String[][] testcase, int k) {
        List<Integer> xList = new ArrayList<>();
        List<BigInteger> yList = new ArrayList<>();

        for (int i = 0; i < k; i++) {
            int x = Integer.parseInt(testcase[i][0]);
            int base = Integer.parseInt(testcase[i][1]);
            String value = testcase[i][2];

            BigInteger y = decodeValue(value, base);
            xList.add(x);
            yList.add(y);
        }

        return lagrangeInterpolationAtZero(xList, yList);
    }

    public static void main(String[] args) {
        BigInteger secret1 = processTestcase(testcase1, k1);
        BigInteger secret2 = processTestcase(testcase2, k2);

        System.out.println("Secret from Testcase 1: " + secret1);
        System.out.println("Secret from Testcase 2: " + secret2);
    }
}
